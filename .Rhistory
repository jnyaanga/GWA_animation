install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(glue)
library(ggnewscale)
library(ggbeeswarm)
library(gganimate)
# load processed mapping data.
# Note that readr::read_delim will throw parsing errors and put NA in rows that contain actual values in strain/value/allele/var.exp so did not use it
# load inbred mapping reslts
processed_mapping <- read.delim("processed_Cry5B_inbred.tsv", stringsAsFactors=FALSE) %>%
dplyr::mutate(CHROM = factor(CHROM, levels = c("I","II","III","IV","V","X","MtDNA"))) %>%
dplyr::select(-marker) %>%
tidyr::unite("marker", CHROM, POS, sep = ":", remove = F) %>%
dplyr::mutate(algorithm = "INBRED")
# do we have mito mapping?
mito_check <- processed_mapping %>%
na.omit()
## MANHATTAN PLOTS ##
for.plot <- processed_mapping %>%
dplyr::mutate(CHROM = as.factor(CHROM)) %>%
{
if(!("MtDNA" %in% mito_check$CHROM)) dplyr::filter(., CHROM != "MtDNA") else .
}
BF <- processed_mapping %>%
dplyr::group_by(trait, algorithm) %>%
dplyr::filter(log10p != 0) %>%
dplyr::distinct(marker, log10p) %>%
dplyr::mutate(BF = -log10(0.05/sum(log10p > 0, na.rm = T))) %>%
dplyr::ungroup() %>%
dplyr::select(BF) %>%
unique(.) %>%
dplyr::slice(1) %>% # BF can be slightly different between loco and inbred... but just plot one (5.46 v 5.47...)
as.numeric()
BF.frame <- processed_mapping %>%
dplyr::select(trait) %>%
dplyr::filter(!duplicated(trait)) %>%
dplyr::mutate(BF = BF, user = unique(processed_mapping$BF)[1])
# if user selected a different threshold, use that, otherwise plot BF and EIGEN
if(BF.frame$user %in% c(BF.frame$BF)) {
for.plot.ann <- for.plot %>%
dplyr::mutate(sig = case_when(log10p > BF.frame$BF ~ "BF",
TRUE ~ "NONSIG"))
sig.colors <- c("red","black")
names(sig.colors) <- c("BF","NONSIG")
} else {
for.plot.ann <- for.plot %>%
dplyr::mutate(sig = case_when(log10p > BF.frame$user ~ "user",
TRUE ~ "NONSIG"))
sig.colors <- c("red", "black")
names(sig.colors) <- c("user", "NONSIG")
}
test <- BF.frame %>%
tidyr::pivot_longer(BF:user) %>%
dplyr::distinct() %>%
dplyr::filter(name %in% names(sig.colors))
# are we plotting mito or no?
if("MtDNA" %in% unique(for.plot.ann$CHROM)) {
facet_scales <- "fixed"
} else {
facet_scales <- "free"
}
# make the plot
man.plot <- ggplot() +
theme_bw() +
geom_point(data = for.plot.ann,
mapping = aes(x = POS/1000000,
y = log10p,
colour = sig,
alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
geom_hline(data = test, aes(yintercept = value, linetype = name)) +
scale_linetype_manual(values = c("BF" = 1, "user" = 2)) +
labs(x = "Genomic position (Mb)",
y = expression(-log[10](italic(p)))) +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(algorithm ~ CHROM, scales = "free_x", space = facet_scales) +
ggtitle(BF.frame$trait)
# use code below to save the plot to file.
# ggsave(man.plot, filename = paste0(BF.frame$trait,"_manhattan.plot.png"), width = 8, height = 4)
# show plot
man.plot
nested.pxg.dat <- processed_mapping %>%
#dplyr::filter(algorithm == "INBRED") %>%
dplyr::filter(!is.na(peak_id)) %>%
dplyr::select(CHROM, marker, trait, startPOS, peakPOS, endPOS, AF1, value, strain, allele, peak_id) %>%
dplyr::distinct() %>%
dplyr::mutate(startPOS = startPOS/1000000,
peakPOS = peakPOS/1000000,
endPOS = endPOS/1000000) %>%
# dplyr::left_join(.,sweep.chrom.pivot) %>% # don't have this file yet
# dplyr::group_by(trait, peak_id) %>%
# dplyr::recode(allele, "-1" = "REF", "1" = "ALT") %>%
dplyr::mutate(allele = dplyr::case_when(allele == "-1" ~ "REF",
allele == "1" ~ "ALT",
TRUE ~ "NA"),
allele = factor(allele, levels = c("REF", "ALT")))
strains.of.interest <- c("PD1074", "N2", "CB4856", "RC301", "MY16",
"ECA396", "ECA36", "XZ1516", "ECA248", "AB1",
"CB4507", "CB4858", "CB4855", "CB4852", "MY1",
"JU319", "JU345", "JU400", "PB306", "PX174", "PX179")
plot <- nested.pxg.dat %>%
dplyr::filter(allele != "NA" | !is.na(allele)) %>%
dplyr::mutate(SOI = strain %in% strains.of.interest,
SOI.3 = dplyr::case_when(strain %in% c("N2", "PD1074") ~ "N2",
strain == "CB4856" ~ "CB",
strain %in% strains.of.interest ~ "special",
TRUE ~ "other"),
SOI.2 = if_else(SOI == TRUE, true = strain, false = "")) %>%
droplevels() %>%
dplyr::arrange(SOI.2) %>%
ggplot2::ggplot(mapping = aes(x = allele, y = value, text = SOI.2)) +
ggplot2::theme_bw(base_size = 12) +
ggplot2::geom_violin(aes(fill = allele), alpha = 0.5, scale = "count", draw_quantiles = c(0.25, 0.5, 0.75)) +
ggplot2::scale_fill_manual(values = c("REF" = "#A79F92", "ALT" = "mediumpurple4"), guide = FALSE) +
ggnewscale::new_scale("fill") +
ggplot2::geom_point(aes(fill = SOI.3, size = SOI), position = ggbeeswarm::position_beeswarm(), shape = 21) +
ggplot2::scale_fill_manual(values = c("N2" = "orange", "CB" = "blue", "special" ="red", "other" ="grey50"), guide = FALSE) +
ggplot2::scale_size_manual(values = c(1.5,2.5), guide = FALSE) +
ggrepel::geom_text_repel(aes(label = SOI.2),
colour = "black", position = ggbeeswarm::position_beeswarm()) +
ggplot2::theme(legend.position = "bottom") +
ggplot2::labs(y = "Trait Value",
x = "Genotype") +
ggplot2::facet_grid(~marker)
print(plot)
# save
# ggsave(glue::glue("pxg.png"), height = 5, width = 5)
library(tidyverse)
library(glue)
library(gganimate)
library(ggbeeswarm)
######################
####  Load Data   ####
######################
# load data for manhattan plot --> ie. marker information
processed_mapping <- read.delim("processed_Cry5B_inbred.tsv", stringsAsFactors=FALSE) %>%
dplyr::mutate(CHROM = factor(CHROM, levels = c("I","II","III","IV","V","X","MtDNA"))) %>%
dplyr::select(-marker) %>%
tidyr::unite("marker", CHROM, POS, sep = ":", remove = F) %>%
dplyr::mutate(POS = POS/1000000) %>%
dplyr::select(marker:aboveBF) %>%
dplyr::distinct()
# load strain data for each marker
genotype_matrix <- read.delim("Genotype_Matrix.tsv", stringsAsFactors=FALSE) %>%
dplyr::mutate(CHROM = factor(CHROM, levels = c("I","II","III","IV","V","X","MtDNA"))) %>%
tidyr::unite("marker", CHROM, POS, sep = ":", remove = F) %>%
dplyr::mutate(POS = POS/1000000) %>%
tidyr::pivot_longer(cols = AB1:XZ2018,
names_to = "strain",
values_to = "allele") %>%
dplyr::mutate(allele = dplyr::case_when(allele == "-1" ~ "REF",
allele == "1" ~ "ALT",
TRUE ~ "NA"),
allele = factor(allele, levels = c("REF", "ALT")))
# load phenotype data for each strain
phenotypes <- read.delim("phenotypes.tsv", stringsAsFactors=FALSE) %>%
dplyr::rename(value = Cry5B) %>%
dplyr::left_join(genotype_matrix, ., by = "strain")
# clean up marker data and set significance threshold as BF
BF <- processed_mapping %>%
dplyr::group_by(trait) %>%
dplyr::filter(log10p != 0) %>%
dplyr::distinct(marker, log10p) %>%
dplyr::mutate(BF = -log10(0.05/sum(log10p > 0, na.rm = T))) %>%
dplyr::ungroup() %>%
dplyr::select(BF) %>%
unique(.) %>%
dplyr::slice(1) %>% # BF can be slightly different between loco and inbred... but just plot one (5.46 v 5.47...)
as.numeric()
BF.frame <- processed_mapping %>%
dplyr::select(trait) %>%
dplyr::filter(!duplicated(trait)) %>%
dplyr::mutate(BF = BF)
# combine all data
all_data <- processed_mapping %>%
dplyr::inner_join(., phenotypes, by = c("marker", "CHROM", "POS")) %>%
dplyr::mutate(sig = case_when(log10p > BF.frame$BF ~ "BF", TRUE ~ "NONSIG"),
strain = as.factor(strain))
sig.colors <- c("red","black")
names(sig.colors) <- c("BF","NONSIG")
facet_scales <- "free"
all_data %>%
dplyr::filter(CHROM %in% c("IV")) %>%
group_by("marker","CHROM","POS","A1","A2","AF1","BETA","SE","P","log10p","trait","BF","aboveBF","sig")
all_data %>%
dplyr::filter(CHROM %in% c("IV")) %>%
group_by(marker,CHROM,POS,A1,A2,AF1,BETA,SE,P,log10p,trait,BF,aboveBF,sig)
IV <- all_data %>%
dplyr::filter(CHROM %in% c("IV")) %>%
group_by(marker,CHROM,POS,A1,A2,AF1,BETA,SE,P,log10p,trait,BF,aboveBF,sig) %>%
nest()
View(IV)
is_grouped_df(IV)
rm(V)
IV <- all_data %>%
dplyr::filter(CHROM %in% c("IV")) %>%
group_by(marker,CHROM,POS,A1,A2,AF1,BETA,SE,P,log10p,trait,BF,aboveBF,sig) %>%
nest() %>%
ungroup()
is_grouped_df(IV)
IVsub <- IV %>%
dplyr::group_by(sig) %>%
dplyr::slice_sample(prop = 0.2) %>%
ungroup()
View(IVsub)
IVsub
ggplot() +
theme_bw() +
aes(group = POS) +
geom_point(mapping = aes(x = POS, y = log10p, color = sig, alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
scale_y_continuous(limits = c(0,7.5)) +
geom_hline(yintercept = 5.47, linetype = "dashed") +
scale_linetype_manual(values = c("BF" = 1)) +
labs(x = "Genomic Position (Mb)", y = expression(-log[10](italic(p)))) +
#labs(title = "Progress: {frame} of {nframes}") +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(. ~ CHROM, scales = "free_x", space = facet_scales)
IVsub %>%
ggplot() +
theme_bw() +
aes(group = POS) +
geom_point(mapping = aes(x = POS, y = log10p, color = sig, alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
scale_y_continuous(limits = c(0,7.5)) +
geom_hline(yintercept = 5.47, linetype = "dashed") +
scale_linetype_manual(values = c("BF" = 1)) +
labs(x = "Genomic Position (Mb)", y = expression(-log[10](italic(p)))) +
#labs(title = "Progress: {frame} of {nframes}") +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(. ~ CHROM, scales = "free_x", space = facet_scales)
IVsub <- IV %>%
dplyr::group_by(sig) %>%
dplyr::slice_sample(prop = 0.3) %>%
ungroup()
# manhattan
chrIV <- IVsub %>%
ggplot() +
theme_bw() +
aes(group = POS) +
geom_point(mapping = aes(x = POS, y = log10p, color = sig, alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
scale_y_continuous(limits = c(0,7.5)) +
geom_hline(yintercept = 5.47, linetype = "dashed") +
scale_linetype_manual(values = c("BF" = 1)) +
labs(x = "Genomic Position (Mb)", y = expression(-log[10](italic(p)))) +
#labs(title = "Progress: {frame} of {nframes}") +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(. ~ CHROM, scales = "free_x", space = facet_scales) +
transition_reveal(POS) +
shadow_trail(future = F, alpha = alpha*2, size = size/10, distance = 0.01)
length(IVsub)
nrow(IVsub)
animate(chrIV, nframes=nrow(IVsub), duration = 30, renderer = gifski_renderer(loop = F, width = 800, height = 800))
# phenotype x genotype
chrIVpxg <- IVsub %>%
unnest() %>%
ggplot() +
theme_bw() +
aes(x = allele, y = value) +
geom_jitter(aes(color = sig), width = 0.2, shape = 21) +
geom_boxplot(aes(color = sig), alpha = 0.4) +
scale_color_manual(values = sig.colors) +
guides(color = "none") +
theme(legend.position = "bottom") +
labs(x = "Genotype", y = "Trait Value") +
facet_grid(. ~ CHROM) +
scale_y_continuous(limits = c(-3.5,3.5)) +
scale_x_discrete(breaks = c("REF", "ALT")) +
transition_manual(POS)
IVsub %>%
unnest(cols = c(data))
# phenotype x genotype
chrIVpxg <- IVsub %>%
unnest(cols = c(data)) %>%
ggplot() +
theme_bw() +
aes(x = allele, y = value) +
geom_jitter(aes(color = sig), width = 0.2, shape = 21) +
geom_boxplot(aes(color = sig), alpha = 0.4) +
scale_color_manual(values = sig.colors) +
guides(color = "none") +
theme(legend.position = "bottom") +
labs(x = "Genotype", y = "Trait Value") +
facet_grid(. ~ CHROM) +
scale_y_continuous(limits = c(-3.5,3.5)) +
scale_x_discrete(breaks = c("REF", "ALT")) +
transition_manual(POS)
animate(chrIVpxg, nframes=nrow(IVsub), duration = 30, renderer = gifski_renderer(loop = F, width = 400, height = 800))
anim_save("ChrIV_pxg.gif")
animate(chrIV, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 800, height = 800))
anim_save("ChrIV_man.gif")
animate(chrIVpxg, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 400, height = 800))
anim_save("ChrIV_pxg.gif")
# phenotype x genotype
chrIVpxg <- IVsub %>%
unnest(cols = c(data)) %>%
ggplot() +
theme_bw() +
aes(x = allele, y = value) +
geom_jitter(aes(color = sig), width = 0.2, shape = 21) +
geom_boxplot(aes(color = sig), alpha = 0.4) +
scale_color_manual(values = sig.colors) +
guides(color = "none") +
theme(legend.position = "bottom") +
labs(x = "Genotype", y = "Trait Value") +
facet_grid(. ~ CHROM) +
scale_y_continuous(limits = c(-3.5,3.5)) +
scale_x_discrete(breaks = c("REF", "ALT")) +
transition_reveal(POS)
animate(chrIVpxg, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 400, height = 800))
# manhattan
chrIV <- IVsub %>%
ggplot() +
theme_bw() +
aes(group = POS) +
geom_point(mapping = aes(x = POS, y = log10p, color = sig, alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
scale_y_continuous(limits = c(0,7.5)) +
geom_hline(yintercept = 5.47, linetype = "dashed") +
scale_linetype_manual(values = c("BF" = 1)) +
labs(x = "Genomic Position (Mb)", y = expression(-log[10](italic(p)))) +
#labs(title = "Progress: {frame} of {nframes}") +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(. ~ CHROM, scales = "free_x", space = facet_scales) +
#transition_reveal(POS) +
transition_manual(POS) +
shadow_trail(future = F, alpha = alpha*2, size = size/10, distance = 0.01)
animate(chrIV, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 800, height = 800))
# manhattan
chrIV <- IVsub %>%
ggplot() +
theme_bw() +
aes(group = POS) +
geom_point(mapping = aes(x = POS, y = log10p, color = sig, alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
scale_y_continuous(limits = c(0,7.5)) +
geom_hline(yintercept = 5.47, linetype = "dashed") +
scale_linetype_manual(values = c("BF" = 1)) +
labs(x = "Genomic Position (Mb)", y = expression(-log[10](italic(p)))) +
#labs(title = "Progress: {frame} of {nframes}") +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(. ~ CHROM, scales = "free_x", space = facet_scales) +
#transition_reveal(POS) +
transition_manual(POS, cumulative = TRUE) +
shadow_trail(future = F, alpha = alpha*2, size = size/10, distance = 0.01)
animate(chrIV, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 800, height = 800))
# manhattan
chrIV <- IVsub %>%
ggplot() +
theme_bw() +
aes(group = POS) +
geom_point(mapping = aes(x = POS, y = log10p, color = sig, alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
scale_y_continuous(limits = c(0,7.5)) +
geom_hline(yintercept = 5.47, linetype = "dashed") +
scale_linetype_manual(values = c("BF" = 1)) +
labs(x = "Genomic Position (Mb)", y = expression(-log[10](italic(p)))) +
#labs(title = "Progress: {frame} of {nframes}") +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(. ~ CHROM, scales = "free_x", space = facet_scales) +
#transition_reveal(POS) +
transition_manual(POS, cumulative = TRUE) #+
animate(chrIV, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 800, height = 800))
anim_save("ChrIV_man.gif")
animate(chrIV, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 1200, height = 900))
anim_save("ChrIV_man_wide.gif")
animate(chrIV, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 600, height = 400))
anim_save("ChrIV_man_wide.gif")
animate(chrIVpxg, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 300, height = 400))
anim_save("ChrIV_pxg.gif")
# phenotype x genotype
chrIVpxg <- IVsub %>%
unnest(cols = c(data)) %>%
ggplot() +
theme_bw() +
aes(x = allele, y = value) +
geom_jitter(aes(color = sig), width = 0.2, shape = 21) +
geom_boxplot(aes(color = sig), alpha = 0.4) +
scale_color_manual(values = sig.colors) +
guides(color = "none") +
theme(legend.position = "bottom") +
labs(x = "Genotype", y = "Trait Value") +
facet_grid(. ~ CHROM) +
scale_y_continuous(limits = c(-3.5,3.5)) +
scale_x_discrete(breaks = c("REF", "ALT")) +
#transition_reveal(POS)
transition_manual(POS)
animate(chrIVpxg, nframes=nrow(IVsub), duration = 25, renderer = gifski_renderer(loop = F, width = 300, height = 400))
anim_save("ChrIV_pxg.gif")
animate(chrIV, nframes=nrow(IVsub), duration = 25, height = 2, width = 3, units = "in", res = 300)
anim_save("ChrIV_man.gif")
animate(chrIV, nframes=nrow(IVsub), duration = 25, height = 4, width = 6, units = "in", res = 300)
animate(chrIV, nframes=nrow(IVsub), duration = 25, height = 4, width = 6, units = "in", res = 300)
anim_save("ChrIV_man.gif")
animate(chrIVpxg, nframes=nrow(IVsub), duration = 25, height = 4, width = 3, units = "in", res = 300)
# phenotype x genotype
chrIVpxg <- IVsub %>%
unnest(cols = c(data)) %>%
ggplot() +
theme_bw() +
aes(x = allele, y = value) +
geom_jitter(aes(color = sig), width = 0.2, shape = 21) +
geom_boxplot(aes(color = sig), alpha = 0.4, outlier.alpha = 0) +
scale_color_manual(values = sig.colors) +
guides(color = "none") +
theme(legend.position = "bottom") +
labs(x = "Genotype", y = "Trait Value") +
facet_grid(. ~ CHROM) +
scale_y_continuous(limits = c(-3.5,3.5)) +
scale_x_discrete(breaks = c("REF", "ALT")) +
#transition_reveal(POS)
transition_manual(POS)
animate(chrIVpxg, nframes=nrow(IVsub), duration = 20, height = 4, width = 3, units = "in", res = 300)
anim_save("ChrIV_pxg.gif")
animate(chrIV, nframes=nrow(IVsub), duration = 20, height = 4, width = 6, units = "in", res = 300)
anim_save("ChrIV_man.gif")
IVsub <- IV %>%
dplyr::group_by(sig) %>%
dplyr::slice_sample(prop = 0.2) %>%
ungroup()
nrow(IVsub)
IVsub %>%
ggplot() +
theme_bw() +
aes(group = POS) +
geom_point(mapping = aes(x = POS, y = log10p, color = sig, alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
scale_y_continuous(limits = c(0,7.5)) +
geom_hline(yintercept = 5.47, linetype = "dashed") +
scale_linetype_manual(values = c("BF" = 1)) +
labs(x = "Genomic Position (Mb)", y = expression(-log[10](italic(p)))) +
#labs(title = "Progress: {frame} of {nframes}") +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(. ~ CHROM, scales = "free_x", space = facet_scales)
IVsub <- IV %>%
dplyr::group_by(sig) %>%
dplyr::slice_sample(prop = 0.2) %>%
ungroup()
IVsub %>%
ggplot() +
theme_bw() +
aes(group = POS) +
geom_point(mapping = aes(x = POS, y = log10p, color = sig, alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
scale_y_continuous(limits = c(0,7.5)) +
geom_hline(yintercept = 5.47, linetype = "dashed") +
scale_linetype_manual(values = c("BF" = 1)) +
labs(x = "Genomic Position (Mb)", y = expression(-log[10](italic(p)))) +
#labs(title = "Progress: {frame} of {nframes}") +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(. ~ CHROM, scales = "free_x", space = facet_scales)
# manhattan
chrIV <- IVsub %>%
ggplot() +
theme_bw() +
aes(group = POS) +
geom_point(mapping = aes(x = POS, y = log10p, color = sig, alpha = sig)) +
scale_alpha_manual(values = c("BF" = 1,  "user" = 1, "NONSIG" = 0.25)) +
scale_colour_manual(values = sig.colors) +
scale_x_continuous(expand = c(0, 0), breaks = c(5, 10, 15, 20)) +
scale_y_continuous(limits = c(0,7.5)) +
geom_hline(yintercept = 5.47, linetype = "dashed") +
scale_linetype_manual(values = c("BF" = 1)) +
labs(x = "Genomic Position (Mb)", y = expression(-log[10](italic(p)))) +
#labs(title = "Progress: {frame} of {nframes}") +
theme(legend.position = "none", panel.grid = element_blank()) +
facet_grid(. ~ CHROM, scales = "free_x", space = facet_scales) +
transition_manual(POS, cumulative = TRUE) #+
animate(chrIV, nframes=nrow(IVsub), duration = 15, height = 4, width = 6, units = "in", res = 300)
animate(chrIV, nframes=nrow(IVsub), duration = 8, height = 4, width = 6, units = "in", res = 300)
# phenotype x genotype
chrIVpxg <- IVsub %>%
unnest(cols = c(data)) %>%
ggplot() +
theme_bw() +
aes(x = allele, y = value) +
geom_jitter(aes(color = sig), width = 0.2, shape = 21) +
geom_boxplot(aes(color = sig), alpha = 0.4, outlier.alpha = 0) +
scale_color_manual(values = sig.colors) +
guides(color = "none") +
theme(legend.position = "bottom") +
labs(x = "Genotype", y = "Trait Value") +
facet_grid(. ~ CHROM) +
scale_y_continuous(limits = c(-3.5,3.5)) +
scale_x_discrete(breaks = c("REF", "ALT")) +
#transition_reveal(POS)
transition_manual(POS)
animate(chrIVpxg, nframes=nrow(IVsub), duration = 15, height = 4, width = 3, units = "in", res = 300)
nrow(all_data)
nrow(IVsub)
ncol(IVsub)
